<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="packet__handler__mech_8cpp" kind="file" language="C++">
    <compoundname>packet_handler_mech.cpp</compoundname>
    <includes refid="packet__handler__mech_8hpp" local="yes">packet_handler_mech.hpp</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="2">
        <label>packet_handler_mech.hpp</label>
        <link refid="packet__handler__mech_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>packet_raw.hpp</label>
        <link refid="packet__raw_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>/home/anton/dephan-ros-driver/src/mech_lidar_driver/src/packet_handler_mech.cpp</label>
        <link refid="packet__handler__mech_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacedephan__ros">dephan_ros</innernamespace>
    <briefdescription>
<para>Raw packets handler class for mechanical LiDar. </para>
    </briefdescription>
    <detaileddescription>
<para>Copyright (c) 2024, DEPHAN LLC, Anton Ledrov, Aleksandr Plukchi All rights reserved. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="packet__handler__mech_8hpp" kindref="compound">packet_handler_mech.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">dephan_ros<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>move<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdephan__ros_1_1pkt__hdl__Mech_1a0ebd1b1c380eb96b2486678eddb0937b" kindref="member">pkt_hdl_Mech::pkt_hdl_Mech</ref>(raw_packet_t<sp/>pkt):<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_pkt(std::move(pkt))<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>packet<sp/>emply?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!raw_pkt)<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;empty<sp/>packet<sp/>has<sp/>been<sp/>passed<sp/>to<sp/>ctor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>encoder<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enc_signal<sp/>=<sp/>(<sp/>(uint16_t)raw_pkt[7]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>raw_pkt[6];</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/>bytes<sp/>to<sp/>ranges<sp/>and<sp/>angles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chnl<sp/>=<sp/>0;<sp/>chnl<sp/>&lt;<sp/>CHANELLS;<sp/>chnl++)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ranges[chnl]<sp/>=<sp/>((uint32_t)raw_pkt[16<sp/>+<sp/>chnl<sp/>*<sp/>8<sp/>+<sp/>3]<sp/>&lt;&lt;<sp/>8<sp/>*<sp/>3)<sp/>+<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)raw_pkt[16<sp/>+<sp/>chnl<sp/>*<sp/>8<sp/>+<sp/>2]<sp/>&lt;&lt;<sp/>8<sp/>*<sp/>2)<sp/>+</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)raw_pkt[16<sp/>+<sp/>chnl<sp/>*<sp/>8<sp/>+<sp/>1]<sp/>&lt;&lt;<sp/>8<sp/>*<sp/>1)<sp/>+<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_pkt[16<sp/>+<sp/>chnl<sp/>*<sp/>8];</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angles[chnl]<sp/>=<sp/>(enc_signal<sp/>+<sp/>chnl)<sp/>*<sp/>RAD_RESOLUTION;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/anton/dephan-ros-driver/src/mech_lidar_driver/src/packet_handler_mech.cpp"/>
  </compounddef>
</doxygen>
